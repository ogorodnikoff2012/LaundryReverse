//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2023.05.23 at 11:55:48 PM CEST
//

package tk.xenon98.laundryapp.driver.xml;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlTransient;
import jakarta.xml.bind.annotation.XmlType;
import java.awt.Rectangle;
import java.math.BigInteger;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import tk.xenon98.laundryapp.console.data.serial.RectangleSerializer;

/**
 * <p>
 * Java class for nodeType complex type.
 *
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="nodeType"&gt;
 * &lt;complexContent&gt;
 * &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 * &lt;sequence&gt;
 * &lt;element name="node" type="{}nodeType" maxOccurs="unbounded" minOccurs="0"/&gt;
 * &lt;/sequence&gt;
 * &lt;attribute name="index" use="required" type="{http://www.w3.org/2001/XMLSchema}integer" /&gt;
 * &lt;attribute name="text" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 * &lt;attribute name="resource-id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 * &lt;attribute name="class" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 * &lt;attribute name="package" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 * &lt;attribute name="content-desc" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 * &lt;attribute name="checkable" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 * &lt;attribute name="checked" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 * &lt;attribute name="clickable" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 * &lt;attribute name="enabled" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 * &lt;attribute name="focusable" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 * &lt;attribute name="focused" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 * &lt;attribute name="scrollable" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 * &lt;attribute name="long-clickable" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 * &lt;attribute name="password" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 * &lt;attribute name="selected" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 * &lt;attribute name="bounds" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 * &lt;/restriction&gt;
 * &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "node", propOrder = {"children"})
public class Node {

    @XmlElement(name = "node")
    protected List<Node> children;
    @XmlAttribute(name = "index", required = true)
    protected long index;
    @XmlAttribute(name = "text", required = true)
    protected String text;
    @XmlAttribute(name = "resource-id", required = true)
    protected String resourceId;
    @XmlAttribute(name = "class", required = true)
    protected String clazz;
    @XmlAttribute(name = "package", required = true)
    protected String _package;
    @XmlAttribute(name = "content-desc", required = true)
    protected String contentDesc;
    @XmlAttribute(name = "checkable", required = true)
    protected boolean checkable;
    @XmlAttribute(name = "checked", required = true)
    protected boolean checked;
    @XmlAttribute(name = "clickable", required = true)
    protected boolean clickable;
    @XmlAttribute(name = "enabled", required = true)
    protected boolean enabled;
    @XmlAttribute(name = "focusable", required = true)
    protected boolean focusable;
    @XmlAttribute(name = "focused", required = true)
    protected boolean focused;
    @XmlAttribute(name = "scrollable", required = true)
    protected boolean scrollable;
    @XmlAttribute(name = "long-clickable", required = true)
    protected boolean longClickable;
    @XmlAttribute(name = "password", required = true)
    protected boolean password;
    @XmlAttribute(name = "selected", required = true)
    protected boolean selected;
    @XmlTransient
    protected Rectangle bounds;

    private static final String BOUNDS_FORMAT = "[%d,%d][%d,%d]";

    /**
     * Gets the value of the index property.
     *
     * @return possible object is {@link BigInteger }
     *
     */
    public long getIndex() {
        return index;
    }

    /**
     * Sets the value of the index property.
     *
     * @param value
     *            allowed object is {@link BigInteger }
     *
     */
    public void setIndex(long value) {
        this.index = value;
    }

    /**
     * Gets the value of the text property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getText() {
        return text;
    }

    /**
     * Sets the value of the text property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setText(String value) {
        this.text = value;
    }

    /**
     * Gets the value of the resourceId property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getResourceId() {
        return resourceId;
    }

    /**
     * Sets the value of the resourceId property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setResourceId(String value) {
        this.resourceId = value;
    }

    /**
     * Gets the value of the clazz property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getClazz() {
        return clazz;
    }

    /**
     * Sets the value of the clazz property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setClazz(String value) {
        this.clazz = value;
    }

    /**
     * Gets the value of the package property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getPackage() {
        return _package;
    }

    /**
     * Sets the value of the package property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setPackage(String value) {
        this._package = value;
    }

    /**
     * Gets the value of the contentDesc property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getContentDesc() {
        return contentDesc;
    }

    /**
     * Sets the value of the contentDesc property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setContentDesc(String value) {
        this.contentDesc = value;
    }

    /**
     * Gets the value of the checkable property.
     *
     */
    public boolean isCheckable() {
        return checkable;
    }

    /**
     * Sets the value of the checkable property.
     *
     */
    public void setCheckable(boolean value) {
        this.checkable = value;
    }

    /**
     * Gets the value of the checked property.
     *
     */
    public boolean isChecked() {
        return checked;
    }

    /**
     * Sets the value of the checked property.
     *
     */
    public void setChecked(boolean value) {
        this.checked = value;
    }

    /**
     * Gets the value of the clickable property.
     *
     */
    public boolean isClickable() {
        return clickable;
    }

    /**
     * Sets the value of the clickable property.
     *
     */
    public void setClickable(boolean value) {
        this.clickable = value;
    }

    /**
     * Gets the value of the enabled property.
     *
     */
    public boolean isEnabled() {
        return enabled;
    }

    /**
     * Sets the value of the enabled property.
     *
     */
    public void setEnabled(boolean value) {
        this.enabled = value;
    }

    /**
     * Gets the value of the focusable property.
     *
     */
    public boolean isFocusable() {
        return focusable;
    }

    /**
     * Sets the value of the focusable property.
     *
     */
    public void setFocusable(boolean value) {
        this.focusable = value;
    }

    /**
     * Gets the value of the focused property.
     *
     */
    public boolean isFocused() {
        return focused;
    }

    /**
     * Sets the value of the focused property.
     *
     */
    public void setFocused(boolean value) {
        this.focused = value;
    }

    /**
     * Gets the value of the scrollable property.
     *
     */
    public boolean isScrollable() {
        return scrollable;
    }

    /**
     * Sets the value of the scrollable property.
     *
     */
    public void setScrollable(boolean value) {
        this.scrollable = value;
    }

    /**
     * Gets the value of the longClickable property.
     *
     */
    public boolean isLongClickable() {
        return longClickable;
    }

    /**
     * Sets the value of the longClickable property.
     *
     */
    public void setLongClickable(boolean value) {
        this.longClickable = value;
    }

    /**
     * Gets the value of the password property.
     *
     */
    public boolean isPassword() {
        return password;
    }

    /**
     * Sets the value of the password property.
     *
     */
    public void setPassword(boolean value) {
        this.password = value;
    }

    /**
     * Gets the value of the selected property.
     *
     */
    public boolean isSelected() {
        return selected;
    }

    /**
     * Sets the value of the selected property.
     *
     */
    public void setSelected(boolean value) {
        this.selected = value;
    }

    /**
     * Gets the value of the bounds property.
     *
     * @return possible object is {@link String }
     *
     */
    @XmlAttribute(name = "bounds", required = true)
    public String getRawBounds() {
        return String.format(BOUNDS_FORMAT, (int) this.bounds.getMinX(), (int) this.bounds.getMinY(),
                (int) this.bounds.getMaxX(), (int) this.bounds.getMaxY());
    }

    /**
     * Sets the value of the bounds property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setRawBounds(String value) {
        this.bounds = Objects.requireNonNull(RectangleSerializer.parseRawBounds(value));
    }

    public Rectangle getBounds() {
        return bounds;
    }

    public Node setBounds(final Rectangle bounds) {
        this.bounds = bounds;
        return this;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        final Node node = (Node) o;
        return index == node.index && checkable == node.checkable && checked == node.checked
                && clickable == node.clickable && enabled == node.enabled && focusable == node.focusable
                && focused == node.focused && scrollable == node.scrollable && longClickable == node.longClickable
                && password == node.password && selected == node.selected && Objects.equals(getChildren(),
                        node.getChildren()) && Objects.equals(text, node.text) && Objects.equals(resourceId,
                                node.resourceId) && Objects.equals(clazz, node.clazz) && Objects.equals(_package,
                                        node._package) && Objects.equals(contentDesc, node.contentDesc) && Objects
                                                .equals(
                                                        bounds, node.bounds);
    }

    @Override
    public int hashCode() {
        return Objects.hash(getChildren(), index, text, resourceId, clazz, _package, contentDesc, checkable,
                checked,
                clickable, enabled, focusable, focused, scrollable, longClickable, password, selected, bounds);
    }

    @Override
    public String toString() {
        return "Node{" + "children=" + children + ", bounds=" + bounds + '}';
    }

    public List<Node> getChildren() {
        return this.children == null ? Collections.emptyList() : this.children;
    }
}
